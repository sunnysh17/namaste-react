/*
            Header
                | - Logo
                | - List Items (Right Side)
                | - Cart
            Body
                | - Search Bar
                | - Restaurant List
                | - Restaurant Card
                    | - Image
                    | - Name
                    | - Rating
                    | - Cuisines (tag)
                    | - ETA
            Footer
                | - Links
                | - Copyright
             
            */

**Question: How can we generate cards dynamically?**
Answer: We can use props to generate cards dynamically

const RestaurantCard = (props) => {
    console.log(props);
    return (
        <div className="res-card" style={{ backgroundColor:"#f0f0f0" }}>
            <img 
            className="res-logo"
            alt="res-logo"
            src="https://res.cloudinary.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_508,h_320,c_fill/p9fv8plp2ievunbvvfge" 
            />
            <h3>{props.resName}</h3>
            <h4>{props.cuisine}</h4>
            <h4>4.5 stars</h4>
            <h4>38 minutes</h4>
        </div>
    );
};

const Body = () => {
    return (
        <div className="body">
            <div className="search">Search</div>
            <div className="res-container">
                {/* this will contain restro cards */}
                <RestaurantCard resName="Meghana Foods" cuisine="North Indian, Asian"/>
                <RestaurantCard resName="KFC" cuisine="Burger, Fast Food"/>
            </div>
        </div>

    );
};

***** We can also pass props using destructuring *****

const RestaurantCard = ({resName,cuisine}) => {
    console.log(props);
    return (
        <div className="res-card" style={{ backgroundColor:"#f0f0f0" }}>
            <img 
            className="res-logo"
            alt="res-logo"
            src="https://res.cloudinary.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_508,h_320,c_fill/p9fv8plp2ievunbvvfge" 
            />
            <h3>{resName}</h3>
            <h4>{cuisine}</h4>
            <h4>4.5 stars</h4>
            <h4>38 minutes</h4>
        </div>
    );
};

const Body = () => {
    return (
        <div className="body">
            <div className="search">Search</div>
            <div className="res-container">
                {/* this will contain restro cards */}
                <RestaurantCard resName="Meghana Foods" cuisine="North Indian, Asian"/>
                <RestaurantCard resName="KFC" cuisine="Burger, Fast Food"/>
            </div>
        </div>

    );
};
--------------------------------------------------------------------
<h3>{resData.data.name}</h3>
<h4>{resData.data.cuisines.join(", ")}</h4>
<h4>{resData.data.avgRating} stars</h4>
<h4>â‚¹{resData.data.costForTwo/100} FOR TWO</h4>
<h4>{resData.data.deliveryTime} minutes</h4>

resData.data.deliveryTime - Not a good practice, so destructure it

--------------------------------------------
<RestaurantCard resData={resList[0]}/>
<RestaurantCard resData={resList[1]}/>
<RestaurantCard resData={resList[2]}/>
<RestaurantCard resData={resList[3]}/>        -----> Not a good practice, so loop over it using JS map function
<RestaurantCard resData={resList[4]}/>
<RestaurantCard resData={resList[5]}/>
<RestaurantCard resData={resList[6]}/>
--------------------------------------------
const Body = () => {
    return (
        <div className="body">
            <div className="search">Search</div>
            <div className="res-container">
                {/* this will contain restro cards */}
                {
                    resList.map(restaurant => <RestaurantCard resData={restaurant}/>)
                }
            </div>
        </div>

    );
};
------------------------------------------------------------
Warning - Warning: Each child in a list should have a unique "key" prop.
Solution - key is a reserved word, must be used while looping
 <RestaurantCard key={restaurant.data.id} resData={restaurant}/>